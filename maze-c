#include <stdio.h>
#include <stdlib.h>

#define ROWS 5
#define COLS 5

int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

int isValid(int x, int y) {
   return (x >= 0 && x < ROWS && y >= 0 && y < COLS);
}


struct element {
   int value;
   int curX, curY;//当前的坐标
   struct element*next;//下一个结构体
};
 

 struct element path[ROWS][COLS];
  struct element*cur=&path[0][0];
 int count = 0;
 int len=0;

 void printPath() {
   
  while(cur){
    printf("(%d, %d) -> ", cur->curX, cur->curY);
    cur = cur->next;
  }
   printf("\n");
   cur=&path[0][0];//清楚cur指针

}



void solveMaze(int maze[ROWS][COLS], int x, int y, int length, int *count) {
  if (!isValid(x, y) || maze[x][y] == 1 || path[x][y].value == 1) {
    return;
  }

  if (x == ROWS - 1 && y == COLS - 1) {
    (*count)++;
    printf("第%d条路径:\n", *count);
    printPath();
    return;
  }

  len++;
  for (int i = 0; i < 4; i++) {
    path[x][y].value = 1;
    int newX = x + dx[i];
    int newY = y + dy[i];

    if (isValid(newX, newY)) {
      // 记录新坐标的上一个元素的坐标
      path[x][y].next = &path[newX][newY];
      solveMaze(maze, newX, newY, len, count);
    }
    path[x][y].value = 0;
    path[x][y].next = NULL;
  }


}


int main() {
 int maze[ROWS][COLS] = {
   {0, 0, 0, 0, 0},
   {1, 1, 0, 0, 0},
   {0, 1, 0, 1, 0},
   {0, 1, 0, 1, 0},
   {0, 0, 0, 0, 0}
 };

  for(int i=0;i<ROWS;i++){
    for(int j=0;j<COLS;j++){
      path[i][j].next=NULL;
      path[i][j].curX=i;
      path[i][j].curY=j;
    }
  }

 printf("路径:开始！\n");

 solveMaze(maze, 0, 0, 0, &count);
  if(count==0){
    printf("无路可走");
    return 0;
  }
  printf("一共%d条路径\n", count);
 return 0;
}
